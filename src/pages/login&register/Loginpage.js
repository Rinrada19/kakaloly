import React, { useState } from "react";
import styles from "../../pages/login&register/custom.module.scss";
import "../../styles/custom.scss";
import { useNavigate } from "react-router-dom";
import { TextField, Button } from "@mui/material";
import ToggleButton from "../login&register/ButtonLoginandRegister/ToggleButton";
//import { registerUser } from "../../api/api_register.js"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ path ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
import { loginUser } from "../../api/api_login.js"; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ path ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á

//img
import imgfood1 from "../../imgAll/img/imgfood1.webp";

function Loginpage() {
  const [activeTab, setActiveTab] = useState("login");
  // const [username, setUsername] = useState("");
  // const [password, setPassword] = useState("");
  // const [confirmPassword, setConfirmPassword] = useState("");
  // const [email, setEmail] = useState("");
  const navigate = useNavigate(); // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
  const [usernameErrorMessage, setUsernameErrorMessage] = useState("");
  // const [emailErrorMessage, setEmailErrorMessage] = useState("");
  const [PasswordErrorMessage, setPasswordErrorMessage] = useState("");
  const [confirmPasswordErrorMessage, setconfirmPasswordErrorMessage] =
    useState("");
  // const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [formData, setFormData] = useState({
    username: "",
    email: "",
    password: "",
    confirmPassword: "",
  });
  const [errors, setErrors] = useState({
    username: "",
    email: "",
  });

  const handleInputChange = async (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const [errorMessage, setErrorMessage] = useState(""); // ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

  const handleInputUsernameChange = async (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));

    if (name === "username") {
      // console.log(`Sending request with data: {username: '${value}'}`);
      const isUsernameAvailable = await checkUsernameAvailability(value);
      if (isUsernameAvailable !== true) {
        setUsernameErrorMessage(isUsernameAvailable); // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      } else {
        setUsernameErrorMessage(""); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      }
    }
  };

  // const handleInputEmailChange = async (e) => {
  //   const { name, value } = e.target;
  //   setFormData((prevData) => ({
  //     ...prevData,
  //     [name]: value,
  //   }));

  //   if (name === "email") {
  //     const emailValue = value.trim();

  //     // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏°‡∏µ @ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  //     if (!emailValue.includes("@")) {
  //       setEmailErrorMessage("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ @");
  //       return;
  //     }

  //     try {
  //       // console.log(`üîç Checking email availability for: ${emailValue}`);
  //       const isEmailAvailable = await checkEmailAvailability(emailValue);
  //       // console.log("‚úÖ API Response:", isEmailAvailable);

  //       // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
  //       if (isEmailAvailable === false) {
  //         setEmailErrorMessage("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß");
  //       } else if (typeof isEmailAvailable === "string") {
  //         setEmailErrorMessage(isEmailAvailable); // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà API ‡∏™‡πà‡∏á‡∏°‡∏≤
  //       } else {
  //         setEmailErrorMessage(""); // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÑ‡∏°‡πà‡∏°‡∏µ error
  //       }
  //     } catch (error) {
  //       console.error("‚ùå Error checking email:", error);
  //       setEmailErrorMessage("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•");
  //     }
  //   }
  // };
  // const [PasswordErrorMessage, setPasswordErrorMessage] = useState("");
  // const [confirmPasswordErrorMessage, setconfirmPasswordErrorMessage] = useState("");

  const handlePasswordChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));

    const passwordValue = value.trim();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (passwordValue.length < 8) {
      setPasswordErrorMessage("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
    } else {
      setPasswordErrorMessage(""); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    }
  };

  const handleConfirmPasswordChange = (e) => {
    const { name, value } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [name]: value,
    }));

    const confirmPasswordValue = value.trim();
    const passwordValue = formData.password.trim();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
    if (confirmPasswordValue !== passwordValue) {
      setconfirmPasswordErrorMessage("‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
    } else {
      setconfirmPasswordErrorMessage(""); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    }
  };

  const checkUsernameAvailability = async (username) => {
    const res = await fetch("http://54.79.173.230:5000/users/check-username", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ username }),
    });
    const result = await res.json();
    return result.available || result.message;
  };

  // const checkEmailAvailability = async (email) => {
  //   const res = await fetch("http://54.79.173.230:5000/users/check-email", {
  //     method: "POST",
  //     headers: { "Content-Type": "application/json" },
  //     body: JSON.stringify({ email }),
  //   });
  //   const result = await res.json();
  //   return result.available || result.message;
  // };

  const handleLogin = async (event) => {
    event.preventDefault();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (!formData.username || !formData.password) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
      return;
    }

    try {
      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
      const response = await loginUser(formData);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

      if (response.error) {
        throw new Error(
          response.error.message || "‡∏£‡∏´‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        );
      }

      // console.log("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô:", response);
      alert("‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

      // ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏à‡∏∂‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡∏ô‡πâ‡∏≤
      navigate("/Home");
    } catch (error) {
      console.error("‡∏Å‡∏≤‡∏£‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
      alert(error.message);
    }
  };

  const handleRegister = async (event) => {
    event.preventDefault();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô
    // if (formData.password && formData.password.length < 8) {
    //   alert("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 8 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£");
    //   return;
    // }

    // if (formData.password !== formData.confirmPassword) {
    //   alert("‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô");
    //   return;
    // }

    // if (!formData.email.includes("@")) {
    //   alert("‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ @");
    //   return;
    // }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    const userData = {
      username: formData.username,
      password: formData.password,
      email: formData.email,
    };
    localStorage.setItem("userData", JSON.stringify(userData)); // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô localStorage
    // console.log(userData);
    // ‡∏ñ‡πâ‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
    navigate("/RegistrationForm"); // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  };

  return (
    <div className={styles.container} style={{ backgroundColor: "#FFF2EA" }}>
      {/* img */}
      <div className={styles.div1}>
        <img src={imgfood1} className={styles.responsiveimg1} alt="imgfood1" />
      </div>
      <div className="rightcolumn">
        {/* welcome and Header */}
        <div className={styles.div2}>
          <h3 className={styles.wellcome}>Welcome</h3>
          <h3 className={styles.wellcome}>
            To <span className={styles.kakaloryhead}>Kakalory</span>
          </h3>
          <img src={imgfood1} className={styles.responsiveimg} alt="imgfood1" />
        </div>
        {/* content form */}
        <div className={styles.div3}>
          <ToggleButton onSelect={(tab) => setActiveTab(tab)} />
          {activeTab === "login" ? (
            <form onSubmit={handleLogin}>
              <div className={styles.loginform}>
                {/* ‡∏ü‡∏≠‡∏£‡πå‡∏° Login */}
                <div className={styles.formfield}>
                  <p
                    style={{
                      color: "#915B43",
                      fontWeight: "600",
                      letterSpacing: "0.5px",
                      marginBottom: "4px",
                      width: "267px",
                      paddingLeft: "6px",
                    }}
                  >
                    ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                  </p>
                  <TextField
                    name="username"
                    variant="outlined"
                    fullWidth
                    value={formData.username}
                    onChange={handleInputChange}
                    placeholder=" "
                    sx={{
                      marginBottom: "6px",
                      borderRadius: "20px",
                      width: "100%",
                      height: "36px",
                      "& .MuiOutlinedInput-root": {
                        borderRadius: "20px",
                        height: "36px",
                      },
                      "& fieldset": {
                        borderColor: "#915B43",
                      },
                    }}
                    InputProps={{
                      style: {
                        borderRadius: "20px",
                        fontSize: "16px",
                        color: "gray",
                      },
                    }}
                  />
                </div>
                {/* ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
                <div className={styles.formfield}>
                  <p
                    style={{
                      color: "#915B43",
                      fontWeight: "600",
                      letterSpacing: "0.5px",
                      marginBottom: "4px",
                      paddingLeft: "6px",
                    }}
                  >
                    ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                  </p>
                  <TextField
                    name="password"
                    variant="outlined"
                    fullWidth
                    type="password"
                    value={formData.password}
                    onChange={handleInputChange}
                    placeholder=" "
                    sx={{
                      marginBottom: "6px",
                      borderRadius: "20px",
                      width: "100%",
                      height: "36px",
                      "& .MuiOutlinedInput-root": {
                        borderRadius: "20px",
                        height: "36px",
                      },
                      "& fieldset": {
                        borderColor: "#915B43",
                      },
                    }}
                    InputProps={{
                      style: {
                        borderRadius: "20px",
                        fontSize: "16px",
                        color: "gray",
                      },
                    }}
                  />
                </div>
                {/* ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö */}
                <Button
                  variant="contained"
                  fullWidth
                  onClick={handleLogin}
                  sx={{
                    fontFamily: "'FC Minimal', sans-serif",
                    backgroundColor: "#4A8854",
                    marginTop: "30px",
                    padding: "10px 0",
                    borderRadius: "50px",
                    textTransform: "none",
                    fontSize: "16px",
                    fontWeight: "400",
                    letterSpacing: "1px",
                  }}
                >
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                </Button>
              </div>
            </form>
          ) : (
            <div>
              <form onSubmit={handleRegister}>
                {/* ‡∏ü‡∏≠‡∏£‡πå‡∏° Register *********************************************************************************************/}
                <div className={styles.loginform}>
                  <div className={styles.formfield}>
                    <p
                      style={{
                        color: "#915B43",
                        fontWeight: "600",
                        letterSpacing: "0.5px",
                        marginBottom: "4px",
                        width: "267px",
                        paddingLeft: "6px",
                      }}
                    >
                      ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                    </p>
                    <TextField
                      name="username"
                      variant="outlined"
                      fullWidth
                      value={formData.username}
                      onChange={handleInputUsernameChange}
                      placeholder=" "
                      sx={{
                        marginBottom: "6px",
                        borderRadius: "20px",
                        width: "100%",
                        height: "36px",
                        "& .MuiOutlinedInput-root": {
                          borderRadius: "20px",
                          height: "36px",
                          borderColor: usernameErrorMessage ? "red" : "#915B43",
                        },
                        "& fieldset": {
                          borderColor: usernameErrorMessage ? "red" : "#915B43",
                        },
                      }}
                      InputProps={{
                        style: {
                          borderRadius: "20px",
                          fontSize: "16px",
                          color: usernameErrorMessage ? "red" : "gray", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                        },
                      }}
                    />
                    {usernameErrorMessage && (
                      <p
                        style={{
                          color: "red",
                          fontSize: "12px",
                          marginTop: "4px",
                        }}
                      >
                        {usernameErrorMessage}
                      </p>
                    )}
                  </div>
                  {/* ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                  <div className={styles.formfield}>
                    <p
                      style={{
                        color: "#915B43",
                        fontWeight: "600",
                        letterSpacing: "0.5px",
                        marginBottom: "4px",
                        width: "267px",
                        paddingLeft: "6px",
                      }}
                    >
                      ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
                    </p>
                    <TextField
                      name="email"
                      variant="outlined"
                      fullWidth
                      value={formData.email}
                      onChange={handleInputEmailChange}
                      placeholder=" "
                      sx={{
                        marginBottom: "6px",
                        borderRadius: "20px",
                        width: "100%",
                        height: "36px",
                        "& .MuiOutlinedInput-root": {
                          borderRadius: "20px",
                          height: "36px",
                          // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                          borderColor: emailErrorMessage ? "red" : "#915B43",
                        },
                        "& fieldset": {
                          // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Å‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                          borderColor: emailErrorMessage ? "red" : "#915B43",
                        },
                      }}
                      InputProps={{
                        style: {
                          borderRadius: "20px",
                          fontSize: "16px",
                          color: emailErrorMessage ? "red" : "gray", // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏î‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
                        },
                      }}
                    />
                    {emailErrorMessage && (
                      <p
                        style={{
                          color: "red",
                          fontSize: "12px",
                          marginTop: "4px",
                        }}
                      >
                        {emailErrorMessage}
                      </p>
                    )}
                  </div> */}

                  {/* ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô */}
                  <div className={styles.formfield}>
                    <p
                      style={{
                        color: "#915B43",
                        fontWeight: "600",
                        letterSpacing: "0.5px",
                        marginBottom: "4px",
                        width: "267px",
                        paddingLeft: "6px",
                      }}
                    >
                      ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                    </p>
                    <TextField
                      name="password"
                      variant="outlined"
                      fullWidth
                      type="password"
                      value={formData.password}
                      onChange={handlePasswordChange}
                      placeholder=" "
                      sx={{
                        marginBottom: "6px",
                        borderRadius: "20px",
                        width: "100%",
                        height: "36px",
                        "& .MuiOutlinedInput-root": {
                          borderRadius: "20px",
                          height: "36px",
                        },
                        "& fieldset": {
                          borderColor: PasswordErrorMessage ? "red" : "#915B43",
                        },
                      }}
                    />
                    {PasswordErrorMessage && (
                      <p
                        style={{
                          color: "red",
                          fontSize: "12px",
                          marginTop: "4px",
                        }}
                      >
                        {PasswordErrorMessage}
                      </p>
                    )}
                  </div>

                  <div className={styles.formfield}>
                    <p
                      style={{
                        color: "#915B43",
                        fontWeight: "600",
                        letterSpacing: "0.5px",
                        marginBottom: "4px",
                        width: "267px",
                        paddingLeft: "6px",
                      }}
                    >
                      ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô
                    </p>
                    <TextField
                      name="confirmPassword"
                      variant="outlined"
                      fullWidth
                      type="password"
                      value={formData.confirmPassword}
                      onChange={handleConfirmPasswordChange}
                      placeholder=" "
                      sx={{
                        marginBottom: "6px",
                        borderRadius: "20px",
                        width: "100%",
                        height: "36px",
                        "& .MuiOutlinedInput-root": {
                          borderRadius: "20px",
                          height: "36px",
                        },
                        "& fieldset": {
                          borderColor: confirmPasswordErrorMessage
                            ? "red"
                            : "#915B43",
                        },
                      }}
                    />
                    {confirmPasswordErrorMessage && (
                      <p
                        style={{
                          color: "red",
                          fontSize: "12px",
                          marginTop: "4px",
                        }}
                      >
                        {confirmPasswordErrorMessage}
                      </p>
                    )}
                  </div>

                  <Button
                    variant="contained"
                    fullWidth
                    onClick={handleRegister}
                    sx={{
                      fontFamily: "'FC Minimal', sans-serif",
                      backgroundColor: "#4A8854",
                      marginTop: "35px",
                      padding: "10px 0",
                      borderRadius: "50px",
                      textTransform: "none",
                      fontSize: "16px",
                      fontWeight: "400",
                      letterSpacing: "1px",
                    }}
                  >
                    ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
                  </Button>
                </div>
              </form>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

export default Loginpage;
